

export async function DiscordCompletion(apikey, completionOptions, userMessage, dataObject, payloadObject) {
  try {
    const
      history = dataObject
        .sort((a, b) => (new Date(a.properties.timestamp).getTime() - new Date(b.properties.timestamp).getTime()))
        .map((msg) => ({ role: msg.properties.role !== "assistant" ? "user" : "assistant", content: msg.properties.content })),
      Body = {
        ...completionOptions,
        messages: [
          { role: "system", content: 'The current date is: ' + Date.now().toLocaleString.toString().split('')[0] + 'The current time is: ' + Date.now().toLocaleString.toString().split('')[1] + ' ' + prompt + ' ' + JSON.stringify(payloadObject) },
          ...history,
          { role: "user", content: userMessage }
        ]
      },
      InitialResponse = await fetch('https://api.mistral.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          "Authorization": `Bearer ${apikey}`,
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify({ ...Body })
      });

    return InitialResponse;
  }
  catch (e) {
    if (e instanceof Error) {
      console.error(e.message);
      return new Response(e.message, { status: 500 });
    };
    console.log(e);
    return new Response('Internal Server Error', { status: 500 });
  };
};


const prompt = `
You will recieve structured data objects. They are Discord Message Objects that represent a message sent in a channel within Discord.
You should use the information from the data objects to not only generate a proper response, but also to provide awareness of the user you are interacting with.
The documentation, for reference, is as follows:
Message Structure
Fields specific to the MESSAGE_CREATE and MESSAGE_UPDATE events are listed in the Gateway documentation.
An app will receive empty values in the content, embeds, attachments, and components fields while poll will be omitted if they have not configured (or been approved for) the MESSAGE_CONTENT privileged intent (1 << 15).
Field	 Type  Description
messageID	snowflake	id of the message
channel_id	snowflake	id of the channel the message was sent in
author [1]	user object	the author of this message (not guaranteed to be a valid user, see below)
content [2]	string	contents of the message
timestamp	ISO8601 timestamp	when this message was sent
edited_timestamp	?ISO8601 timestamp	when this message was edited (or null if never)
tts	boolean	whether this was a TTS message
mention_everyone	boolean	whether this message mentions everyone
mentions	array of user objects	users specifically mentioned in the message
mention_roles	array of role object ids	roles specifically mentioned in this message
mention_channels? [3]	array of channel mention objects	channels specifically mentioned in this message
attachments [2]	array of attachment objects	any attached files
embeds [2]	array of embed objects	any embedded content
reactions?	array of reaction objects	reactions to the message
nonce?	integer or string	used for validating a message was sent
pinned	boolean	whether this message is pinned
webhook_id?	snowflake	if the message is generated by a webhook, this is the webhook's id
type	integer	type of message
activity?	message activity object	sent with Rich Presence-related chat embeds
application?	partial application object	sent with Rich Presence-related chat embeds
application_id?	snowflake	if the message is an Interaction or application-owned webhook, this is the id of the application
flags?	integer	message flags combined as a bitfield
message_reference?	message reference object	data showing the source of a crosspost, channel follow add, pin, or reply message
message_snapshots? [5]	array of message snapshot objects	the message associated with the message_reference. This is a minimal subset of fields in a message (e.g. author is excluded.)
referenced_message? [4]	?message object	the message associated with the message_reference
interaction_metadata?	message interaction metadata object	Sent if the message is sent as a result of an interaction
interaction?	message interaction object	Deprecated in favor of interaction_metadata; sent if the message is a response to an interaction
thread?	channel object	the thread that was started from this message, includes thread member object
components? [2]	array of message components	sent if the message contains components like buttons, action rows, or other interactive components
sticker_items?	array of message sticker item objects	sent if the message contains stickers
stickers?	array of sticker objects	Deprecated the stickers sent with the message
position?	integer	A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread
role_subscription_data?	role subscription data object	data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
resolved?	resolved data	data for users, members, channels, and roles in the message's auto-populated select menus
poll? [2]	poll object	A poll!
call?	message call object	the call associated with the message

[1] The author object follows the structure of the user object, but is only a valid user in the case where the message is generated by a user or bot user. If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar. You can tell if a message is generated by a webhook by checking for the webhook_id on the message object.

[2] An app will receive empty values in the content, embeds, attachments, and components fields while poll will be omitted if they have not configured (or been approved for) the MESSAGE_CONTENT privileged intent (1 << 15).

[3] Not all channel mentions in a message will appear in mention_channels. Only textual channels that are visible to everyone in a lurkable guild will ever be included. Only crossposted messages (via Channel Following) currently include mention_channels at all. If no mentions in the message meet these requirements, this field will not be sent.

[4] This field is only returned for messages with a type of 19 (REPLY), 21 (THREAD_STARTER_MESSAGE), or 23 (CONTEXT_MENU_COMMAND). If the message is one of these but the referenced_message field is not present, the backend did not attempt to fetch the message that was being replied to, so its state is unknown. If the field exists but is null, the referenced message was deleted.

[5] See message reference types
Message Types
Type 19 and 20 are only available in API v8 and above. In v6, they are represented as type 0. Additionally, type 21 is only available in API v9 and above.
Type	Value	Deletable
DEFAULT	0	true
RECIPIENT_ADD	1	false
RECIPIENT_REMOVE	2	false
CALL	3	false
CHANNEL_NAME_CHANGE	4	false
CHANNEL_ICON_CHANGE	5	false
CHANNEL_PINNED_MESSAGE	6	true
USER_JOIN	7	true
GUILD_BOOST	8	true
GUILD_BOOST_TIER_1	9	true
GUILD_BOOST_TIER_2	10	true
GUILD_BOOST_TIER_3	11	true
CHANNEL_FOLLOW_ADD	12	true
GUILD_DISCOVERY_DISQUALIFIED	14	true
GUILD_DISCOVERY_REQUALIFIED	15	true
GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING	16	true
GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING	17	true
THREAD_CREATED	18	true
REPLY	19	true
CHAT_INPUT_COMMAND	20	true
THREAD_STARTER_MESSAGE	21	false
GUILD_INVITE_REMINDER	22	true
CONTEXT_MENU_COMMAND	23	true
AUTO_MODERATION_ACTION	24	true*
ROLE_SUBSCRIPTION_PURCHASE	25	true
INTERACTION_PREMIUM_UPSELL	26	true
STAGE_START	27	true
STAGE_END	28	true
STAGE_SPEAKER	29	true
STAGE_TOPIC	31	true
GUILD_APPLICATION_PREMIUM_SUBSCRIPTION	32	true
GUILD_INCIDENT_ALERT_MODE_ENABLED	36	true
GUILD_INCIDENT_ALERT_MODE_DISABLED	37	true
GUILD_INCIDENT_REPORT_RAID	38	true
GUILD_INCIDENT_REPORT_FALSE_ALARM	39	true
PURCHASE_NOTIFICATION	44	true
POLL_RESULT	46	true

* Can only be deleted by members with MANAGE_MESSAGES permission
Message Activity Structure
Field	Type	Description
type	integer	type of message activity
party_id?	string	party_id from a Rich Presence event
Message Activity Types
Type	Value
JOIN	1
SPECTATE	2
LISTEN	3
JOIN_REQUEST	5
Message Flags
Flag Value  Description
CROSSPOSTED	1 << 0	this message has been published to subscribed channels (via Channel Following)
IS_CROSSPOST	1 << 1	this message originated from a message in another channel (via Channel Following)
SUPPRESS_EMBEDS	1 << 2	do not include any embeds when serializing this message
SOURCE_MESSAGE_DELETED	1 << 3	the source message for this crosspost has been deleted (via Channel Following)
URGENT	1 << 4	this message came from the urgent message system
HAS_THREAD	1 << 5	this message has an associated thread, with the same id as the message
EPHEMERAL	1 << 6	this message is only visible to the user who invoked the Interaction
LOADING	1 << 7	this message is an Interaction Response and the bot is "thinking"
FAILED_TO_MENTION_SOME_ROLES_IN_THREAD	1 << 8	this message failed to mention some roles and add their members to the thread
SUPPRESS_NOTIFICATIONS	1 << 12	this message will not trigger push and desktop notifications
IS_VOICE_MESSAGE	1 << 13	this message is a voice message

Use the conversation context to provide relevant and concise responses. Focus on the topics discussed, the questions asked, and the tone of the conversation. Avoid repeating the content of previous messages and ensure that the response is on-topic and brief. 
`;